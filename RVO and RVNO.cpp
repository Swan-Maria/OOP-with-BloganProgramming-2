/* RVO(Return Value Optimization) – оптимизация компилятора, 
позволяющая в некоторых случаях не создавать локальный объект, 
который будет использован как возвращаемое значение.

Вместо этого возвращаемый объект будет сконструирован на месте
вызова функции.Это позволяет устранить лишний вызов конструктора
перемещения/копирования.

В С++17 RVO – это уже не оптимизация, а правило, которое должны 
выполнять компиляторы. Это правило будет применено, даже если 
конструкторы копирования/перемещения имеют побочные эффекты.

Рассмотрим пример:*/

#include <vector>
std::vector<int> GetVector()
{
	return std::vector<int>(1'000'000, 1);
}

void foo()
{
	auto vect = GetVector();
}
/*Здесь значение, возвращаемое функцией GetVector, будет сразу 
создано в памяти, выделенной для объекта vect, при этом 
конструктор перемещения/копирования будут устранены.*/

//-----------------------------------------------------------------

/*NRVO (Named Return Value Optimization) - это оптимизация 
компилятора, как и RVO, вместо создания локального возвращаемого 
объекта и последующего его перемещения/копирования на месте 
вызова функции сразу создаст его в нужном месте. Ее отличие 
от RVO состоит в том, что NRVO применяется к lvalue-объектам.

Рассмотрим пример:*/

std::vector<int> GetVector2()
{
	std::vector<int> result(1'000'000, 1);
	return result;
}

void foo()
{
	auto vect = GetVector();
    //...
}

/*NRVO происходит следующим образом: на месте вызова функции, к которой 
применяется NRVO, вставляется инициализация объекта, в который будет 
присвоен результат этой функции. В аргументы функции добавляется указатель 
на этот объект. Все вычисления, относящиеся к возвращаемому объекту, теперь 
выполняются над объектом, переданным по указателю.*/

//Можно считать, что оптимизация NRVO преобразует код, рассмотренный выше, в следующий:

void GetVector2(std::vector<int>* x)
{
	new (x) std::vector<int>(1'000'000, 0);
}

void foo()
{
	auto* x = static_cast<std::vector<int> *>(
		alloca(sizeof(std::vector<int>)));
	GetVector2(x);
	//....
		delete x;
}